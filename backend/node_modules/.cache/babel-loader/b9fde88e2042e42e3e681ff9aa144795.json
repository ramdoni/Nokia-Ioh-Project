{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n}; /* eslint react/prop-types: 0 */\n\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _classnames = require('classnames');\nvar _classnames2 = _interopRequireDefault(_classnames);\nvar _utils = require('../utils');\nvar _utils2 = _interopRequireDefault(_utils);\nvar _selectionContext = require('../contexts/selection-context');\nvar _selectionContext2 = _interopRequireDefault(_selectionContext);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nexports.default = function (Component) {\n  var renderWithSelection = function renderWithSelection(props, selectRow) {\n    var key = props.value;\n    var selected = _utils2.default.contains(selectRow.selected, key);\n    var selectable = !selectRow.nonSelectable || !_utils2.default.contains(selectRow.nonSelectable, key);\n    var notSelectable = _utils2.default.contains(selectRow.nonSelectable, key);\n    var style = props.style,\n      className = props.className;\n    if (selected) {\n      var selectedStyle = _utils2.default.isFunction(selectRow.style) ? selectRow.style(props.row, props.rowIndex) : selectRow.style;\n      var selectedClasses = _utils2.default.isFunction(selectRow.classes) ? selectRow.classes(props.row, props.rowIndex) : selectRow.classes;\n      style = _extends({}, style, selectedStyle);\n      className = (0, _classnames2.default)(className, selectedClasses) || undefined;\n      if (selectRow.bgColor) {\n        style = style || {};\n        style.backgroundColor = _utils2.default.isFunction(selectRow.bgColor) ? selectRow.bgColor(props.row, props.rowIndex) : selectRow.bgColor;\n      }\n    }\n    if (notSelectable) {\n      var notSelectableStyle = _utils2.default.isFunction(selectRow.nonSelectableStyle) ? selectRow.nonSelectableStyle(props.row, props.rowIndex) : selectRow.nonSelectableStyle;\n      var notSelectableClasses = _utils2.default.isFunction(selectRow.nonSelectableClasses) ? selectRow.nonSelectableClasses(props.row, props.rowIndex) : selectRow.nonSelectableClasses;\n      style = _extends({}, style, notSelectableStyle);\n      className = (0, _classnames2.default)(className, notSelectableClasses) || undefined;\n    }\n    return _react2.default.createElement(Component, _extends({}, props, {\n      style: style,\n      className: className,\n      selectRow: selectRow,\n      selected: selected,\n      selectable: selectable\n    }));\n  };\n  function withConsumer(props) {\n    return _react2.default.createElement(_selectionContext2.default.Consumer, null, function (selectRow) {\n      return renderWithSelection(props, selectRow);\n    });\n  }\n  withConsumer.displayName = 'WithSelectionRowConsumer';\n  return withConsumer;\n};","map":null,"metadata":{},"sourceType":"script"}